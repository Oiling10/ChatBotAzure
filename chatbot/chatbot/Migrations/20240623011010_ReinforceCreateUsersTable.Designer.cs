// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using chatbot.Data;

#nullable disable

namespace chatbot.Migrations
{
    [DbContext(typeof(ChatBotContext))]
    [Migration("20240623011010_ReinforceCreateUsersTable")]
    partial class ReinforceCreateUsersTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PreguntaRespuesta", b =>
                {
                    b.Property<int>("PreguntaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PreguntaID"));

                    b.Property<string>("Pregunta")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Respuesta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PreguntaID");

                    b.ToTable("PreguntasRespuestas");
                });

            modelBuilder.Entity("chatbot.Models.Evaluacion", b =>
                {
                    b.Property<int>("EvaluacionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EvaluacionID"));

                    b.Property<string>("Comentarios")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("InteraccionID")
                        .HasColumnType("integer");

                    b.Property<int>("Puntuacion")
                        .HasColumnType("integer");

                    b.HasKey("EvaluacionID");

                    b.HasIndex("InteraccionID")
                        .IsUnique();

                    b.ToTable("Evaluaciones");
                });

            modelBuilder.Entity("chatbot.Models.Interaccion", b =>
                {
                    b.Property<int>("InteraccionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InteraccionID"));

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Pregunta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PreguntaID")
                        .HasColumnType("integer");

                    b.Property<int>("UsuarioID")
                        .HasColumnType("integer");

                    b.HasKey("InteraccionID");

                    b.HasIndex("PreguntaID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("Interacciones");
                });

            modelBuilder.Entity("chatbot.Models.Usuario", b =>
                {
                    b.Property<int>("UsuarioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UsuarioID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UsuarioID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("chatbot.Models.Evaluacion", b =>
                {
                    b.HasOne("chatbot.Models.Interaccion", "Interaccion")
                        .WithOne("Evaluacion")
                        .HasForeignKey("chatbot.Models.Evaluacion", "InteraccionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interaccion");
                });

            modelBuilder.Entity("chatbot.Models.Interaccion", b =>
                {
                    b.HasOne("PreguntaRespuesta", "PreguntaRespuesta")
                        .WithMany("Interacciones")
                        .HasForeignKey("PreguntaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("chatbot.Models.Usuario", "Usuario")
                        .WithMany("Interacciones")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PreguntaRespuesta");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("PreguntaRespuesta", b =>
                {
                    b.Navigation("Interacciones");
                });

            modelBuilder.Entity("chatbot.Models.Interaccion", b =>
                {
                    b.Navigation("Evaluacion")
                        .IsRequired();
                });

            modelBuilder.Entity("chatbot.Models.Usuario", b =>
                {
                    b.Navigation("Interacciones");
                });
#pragma warning restore 612, 618
        }
    }
}
